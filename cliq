#!/usr/bin/env perl
use strict;
use warnings;
use Encode qw(decode_utf8);
use Getopt::Long qw(GetOptions);
use LWP::UserAgent;
use Mojo::DOM;
use JSON;

my %opts;
GetOptions(
    \%opts,
    "e=s",
    "base-uri=s"
);


my ($url, $selector) = @ARGV;
die "Usage: $0 url css-selecotr" unless $url && $selector;

binmode STDOUT, ":utf8";
my $base_uri;
my $content;
if ($url eq "-") {
    local $/ = undef;
    $content = decode_utf8(<STDIN>);
    $base_uri = $opts{'base-uri'};
} else {
    my $ua = LWP::UserAgent->new;
    my $response = $ua->get($url);

    die "Failed to get the URL" unless $response->is_success;
    die "The response is not HTML" unless $response->header("Content-Type") =~ m{^text/html\s*(;|$)}i;

    if ($response->content =~ m{<meta \s+ http-equiv="Content-Type" \s+ content="text/html; \s* charset=big5" \s* /?>}xi) {
        $content = $response->decoded_content( charset => "big5", alt_charset => "big5" );
    } else {
        $content = $response->decoded_content;
    }

    $base_uri = $url;
}


my $json_encoder = JSON->new->canonical;
my $dom = Mojo::DOM->new;
$dom->parse($content);

$dom->find($selector)->each(
    sub {
        my $el = shift;
        my $attrs = $el->attr;
	my $doc = {};

	$doc->{text} = $el->text;
        for (keys %$attrs) {
	    $doc->{attrs}{$_} = "". $attrs->{$_};
        }

	if (defined($doc->{attrs}{href}) && $base_uri) {
	    $doc->{href} = URI->new_abs($doc->{attrs}{href}, $base_uri)->as_string;
	}

	if (defined($opts{e})) {
	    local $_ = $doc;
	    my $r = eval "$opts{e}";
	    $doc = $r;
	}
	if (ref($doc)) {
	    print $json_encoder->encode($doc), "\n";
	} else {
	    print "$doc\n";
	}
});
