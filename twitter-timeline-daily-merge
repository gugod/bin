#!/usr/bin/env perl
use v5.18;
use strict;
use warnings;

use List::MoreUtils qw(part);
use Sereal::Decoder;

use FindBin;
use lib $FindBin::Bin . "/lib";
use Fun::File qw(srl spew slurp);

my %args = @ARGV;
my $input_dir   = $args{'-i'} or die "No input dir -i";
my $output_dir  = $args{'-o'} or die "No output dir -o";

sub t2d {
    my ($t) = @_;
    my ($dd,$mm,$yyyy) = (localtime($t))[3,4,5];
    return sprintf('%04d-%02d-%02d', ($yyyy+1900), ($mm+1), $dd);
}

my $today = t2d(time);
my $unmerged = [];
my $users_unmerged = [];
for my $f ( glob($input_dir . "/twitter-*.srl") ) {
    if ($f =~ /\/ twitter-status-(?<ts>[0-9]+).srl \z/x) {
        my $p = t2d($+{ts});
        if ($p ne $today) {
            push @$unmerged, [$p, $f];
        }
    }
    if ($f =~ /\/ twitter-users-(?<ts>[0-9]+).srl \z/x) {
        push @$users_unmerged, $f;
    }
}

@$unmerged = sort { $a->[0] cmp $b->[0] } @$unmerged;

my $srl_decoder = Sereal::Decoder->new;

while ($unmerged && @$unmerged) {
    (my $batch, $unmerged) = part { ($_->[0] eq $unmerged->[0][0]) ? 0 : 1 } @$unmerged;
    last unless $batch && @$batch;
    my $date = $batch->[0][0];
    my @rows;
    my %seen;
    for (@$batch) {
        my $f = $_->[1];
        my $d = do {
		open(my $fh, "<", $f)or die $!;
		local $/ = undef;
		<$fh>;
	};
        if ($srl_decoder->looks_like_sereal($d)) {
            my $rows;
            eval {
                $rows = $srl_decoder->decode($d);
                push @rows, grep { !($seen{$_->{id}}++) } @$rows;
                1;
            } or do {
                warn "$f is broken";
            };
        } else {
            say STDERR "Does not look like Sereal: $f";
        }
    }

    spew("${output_dir}/twitter-status-${date}.srl", \@rows);

    for (@$batch) {
        unlink($_->[1]);
    }
}

my $users_merged = {};
for my $f (sort { $b cmp $a } @$users_unmerged) {
    my $f = shift @$users_unmerged;
    my $d = do {
	    open(my $fh, "<", $f)or die $!;
	    local $/ = undef;
	    <$fh>;
    };
    if ($srl_decoder->looks_like_sereal($d)) {
        my $u;
        eval {
            $u = $srl_decoder->decode($d);
            for (keys %$u) {
                $users_merged->{$_} //= $u->{$_};
            }
            1;
        } or do {
            warn "$f is broken";
        };
    } else {
        say STDERR "Does not look like Sereal: $f";
        unlink($f);
    }
}

spew("${output_dir}/twitter-users-${today}.srl", srl($users_merged));

unlink(@$users_unmerged);
