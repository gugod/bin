#!/usr/bin/env perl

=head1 SYNOPSIS

C<exif-search> is a program that finds files with matching EXIF information.

Example: Find files store under 2 folders with Geo tags that is with 5kms from [Erlin Butokuden][1]

    exif-search \
        --ll 23.8997913,120.3691942 --disntance 5 \
        /data/main/Pictures /data/backup/Pictures

[1]: https://goo.gl/maps/genakeXbVdaK8oDb7

=head1 OPTIONS

    --ll        lat,long -- that is, 2 decimals with a comma in between.
                This is the usual format found in valious web-based maps.

    --distance  A decimal number in kilometres. The default is 10.
                This option is only meaningful if C<--ll> is also given.

=cut

use v5.18;
use strict;
use warnings;

use Pod::Usage qw(pod2usage);
use GIS::Distance;
use File::Next;
use Getopt::Long;
use Image::ExifTool;
use Image::ExifTool::Location;

sub build_filter_camera {
    my ($opts) = @_;

    my $camera = lc($opts->{camera});
    return sub {
        my ($exif, $info) = @_;
        my $x = $info->{'Camera Model Name'};

        return 0 unless $x;
        return index(lc($x), $camera) >= 0;
    };
}

sub build_filter_latlng {
    my ($opts) = @_;

    my $distance = $opts->{distance};
    my ($lat, $long) = split(',', $opts->{ll}, 2);

    my $gis = GIS::Distance->new();
    return sub {
        my ($exif, undef) = @_;
        return 0 unless $exif->HasLocation;

        my ($image_lat, $image_long) = $exif->GetLocation;
        my $d = $gis->distance($lat, $long, $image_lat, $image_long)->kilometre;

        return $d < $distance;
    };
}

sub main {
    my ($opts, $args) = @_;
    my (@paths) = @$args;

    pod2usage({ -verbose => 2 }) if $opts->{help};

    my $iter = File::Next::files(+{ file_filter => sub { /\.jpg\z/i } }, @paths );

    my @filters;

    if ($opts->{ll}) {
        push(@filters, build_filter_latlng($opts));
    }
    if ($opts->{camera}) {
        push(@filters, build_filter_camera($opts));
    }

    my $filter = sub {
        my @x = @_[0,1];
        for my $f (@filters) {
            return 0 unless $f->(@x);
        }
        return 1;
    };

    while (my $file = $iter->()) {
        my $exif = Image::ExifTool->new;
        my $info = $exif->ImageInfo($file);
        next unless $filter->( $exif, $info );
        say "$file";
    }
}

my %opts;
GetOptions(
    \%opts,
    'help|h',
    'll=s',
    'distance=n',
    'camera=s',
) || pod2usage({ -verbose => 1 });
main(\%opts, [@ARGV]);
