#!/usr/bin/env perl
use v5.18;
use strict;
use warnings;

use File::Copy qw(move);
use File::Basename qw(fileparse);
use File::Path qw(make_path);
use File::Spec::Functions qw(catfile catdir);
use File::Next;
use Getopt::Long;
use Digest::SHA;

sub sha1_digest {
    my ($file) = @_;
    open my $fh, "<", $file;
    my $sha1 = Digest::SHA->new(1);
    $sha1->addfile($fh);
    return $sha1->digest;
}

sub main {
    my ($opts, $args) = @_;
    my @input = grep { -f || -d } @{ $opts->{i} };
    my $iter = File::Next::files(@input);
    my %plan;
    while (defined( my $file = $iter->() )) {
        next if $file =~ / \.DS_Store \z/x;

        my $mtime = (stat($file))[9];
        my ($year, $month, $day) = ( localtime($mtime) )[5,4,3];
        $year += 1900; $month += 1;
        my $yyyy     = sprintf('%04d', $year);
        my $yyyymmdd = sprintf('%04d%02d%02d', $year, $month, $day);
        my $filename = fileparse($file);

        my $new_dir;
        if (defined($opts->{d}) && $opts->{d} ne "") {
            $new_dir = catfile($yyyy, $yyyymmdd, $opts->{d});
        } else {
            $new_dir = catdir($yyyy, $yyyymmdd);
        }
        my $new_path = catfile($new_dir, $filename);

        if (-e $new_path) {
            my $sha1_a = sha1_digest($new_path);
            my $sha1_b = sha1_digest($file);

            if ($sha1_a eq $sha1_b) {
                say("rm $file # duplicate\t$file\t$new_path");
                unlink($file);
            } else {
                my $msg = "File already exists: $new_path (from $file)";
                if ($opts->{'ignore-existing'}) {
                    warn $msg;
                } else {
                    die $msg;
                }
            }
        } else {
            if (exists $plan{$new_path}) {
                my $msg = "File name Conflict:\n\t -> " . join("\n\t -> ", @{$plan{$new_path}}) . "\n\t <- $file\n";
                if ($opts->{'ignore-existing'}) {
                    $msg =~ s/:/ (Ignored):/;
                    warn $msg;
                } else {
                    die $msg;
                }
            } else {
                $plan{$new_path} = [$file, $new_dir];
            }
        }
    }

    for my $k (keys %plan) {
        my ($file, $new_dir) = @{ $plan{$k} };
        if ($opts->{n}) {
            say "mv $file $k";
        } else {
            make_path($new_dir) unless -d $new_dir;
            say "mv $file $k";
            move($file, $k);
        }
    }
}

my %opts;
GetOptions(
    \%opts,
    'i=s@',
    'd=s',
    'n',
    'ignore-existing'
);
main(\%opts, [@ARGV]);

