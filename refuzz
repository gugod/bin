#!/usr/bin/env perl
use v5.18;
use warnings;
use JSON;
use String::Random;
use File::Slurp qw(write_file read_file);
use List::Util qw(max uniq);
use Data::Dumper qw(Dumper);
use Encode qw(encode_utf8);

sub try_one {
    my ($re, $str) = @_;

    my $fn_prog = "/tmp/prog.pl";
    my $fn_rx   = "/tmp/rx.json";

    my $prog = <<"PROGRAM";
#!/usr/bin/env perl
use v5.18;
use utf8;
use Regexp::Debugger save_to => "$fn_rx";

my \$str = "\Q$str\E";
\$str =~ /$re/;
PROGRAM

    write_file $fn_prog, encode_utf8($prog);

    my $pid = fork();
    if ($pid == 0) {
        close STDERR;
        close STDOUT;
        close STDERR;
        exec $^X, $fn_prog;
    } else {
        waitpid($pid, 0);
    }

    my $matched;
    my $steps = -1;
    open my $fh, '<', $fn_rx;
    while(<$fh>) {
        chomp;
        if (/"msg" : ".+(matched|failed).+(?:in|after) ([0-9]+) steps"/) {
            $matched = $1 eq "matched";
            $steps = $2;
            last;
        }
    }
    close($fh);

    unlink $fn_rx;
    unlink $fn_prog;

    return ($matched, $steps);
}

sub try_many {
    my ($re, @strs) = @_;
    my %steps;

    for my $s (@strs) {
        my $steps = try_one($re, $s);
        $steps{$s} = $steps;
        say encode_utf8("$steps\t<=\t$s");
    }

    return \%steps;
}

sub str_enlenghten {
    my ($re, $str) = @_;
    my @chars = uniq( (split //, $re), ( map { chr( rand(65534)+1 ) } 0..2 ) );
    return uniq(map { ($_ . $str, $str . $_) } @chars);
}

sub largest_set {
    my $x2n = $_[0];
    my $y = max(values %$x2n);
    return grep { $x2n->{$_} == $y } keys %$x2n;
}

my $re = $ARGV[0];

my @strs =  ("");
for (1..30) {
    say "----";
    my $steps = try_many($re, map { str_enlenghten($re, $_) } @strs);
    @strs = largest_set($steps);
}

say for @strs;
