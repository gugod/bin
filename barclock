#!/usr/bin/env perl
use v5.18;
use utf8;
use warnings;

package BarClock {
    use Time::Piece;

    sub new {
        my ($class, %attrs) = @_;
        return bless {
            t     => localtime(),
            term_width => 0+`tput cols`,
            attrs => \%attrs
        }, $class;
    }

    sub tick {
        my ($self) = @_;
        $self->{t} = localtime();
    }

    sub display_bar {
        my ($self, $left_text, $right_text, $current, $total) = @_;
        my $width = $self->{term_width} - 20;

        my $done = int($width * $current/$total);
        my $togo = $width - $done;
        my $bar = ("â–“" x $done) . (" " x $togo);

        my $x = sprintf '  %6s %'.$width.'s %-5s  ', $left_text, $bar, $right_text;
        utf8::encode($x);
        print $x . "\n";
    }

    sub display {
        my ($self) = @_;
        my $t = $self->{t};

        # system( "tput", "clear" );
        print "\x1b\x5b\x48\x1b\x5b\x32\x4a";
        $self->{term_width} = 0+`tput cols`;

        print "\n";
        $self->display_bar($t->year,  $t->year+1, $t->yday, 365 + ($t->is_leap_year ? 1 : 0));
        $self->display_bar($t->month, $t->add_months(1)->month,  $t->mday, $t->month_last_day);
        $self->display_bar($t->mday,  $t->mday+1, $t->hour, 24);
        $self->display_bar($t->hour,  $t->hour+1, $t->min,  60);
        $self->display_bar($t->min,   $t->min+1,  $t->sec,  60);
    }

    sub run {
        my ($self) = @_;
        while (1) {
            $self->tick;
            $self->display;
            sleep 1;
        }
    }
};

my $bc = BarClock->new;
$bc->run;
