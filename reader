#!/usr/bin/env perl
use v5.14;
use File::Basename qw(basename);
use HTML::ExtractContent;
use HTML::WikiConverter;
use HTML::WikiConverter::Markdown;
use Mojo::UserAgent;
use JSON;
use Encode;
use URI;
use URI::Escape qw(uri_escape);

$SIG{__DIE__} = sub {
    require Devel::StackTrace;
    print Devel::StackTrace->new->as_string;
    exit;
};

my $program_name = basename($0);

my $url = shift @ARGV or die <<USAGE;

Pass URLs from argv:

   $program_name URL

USAGE

sub extract_as_text {
    state $ex = HTML::ExtractContent->new;

    return $ex->extract($_[0])->as_text;
}

sub extract_locally {
    my $url = shift;
    my $ua = Mojo::UserAgent->new->max_redirects(10);
    my $tx = $ua->get($url);

    my $base_url = URI->new($url);
    my $dom = $tx->res->dom;
    my $content_type = $tx->res->headers->content_type;

    my $charset;
    if ($content_type =~ m!charset=(.+)[;\s]?!) {
        $charset = $1;
    }
    if (!$charset) {
        if (my $meta_el = $dom->find("head meta[http-equiv=Content-Type]")->first) {
            ($charset) = $meta_el->{content} =~ m{charset=([^\s;]+)};                    
        }
    }
    $charset ||= "utf-8";

    my $html = Encode::decode($charset, $tx->res->body);

    my $title = $dom->find("title");
    if ($title->size > 0) {
        $title = $title->[0]->text;
        $title = Encode::decode($charset, $title) unless $title && Encode::is_utf8($title);
    }

    my $text = extract_as_text($html)
        =~ s!^ \S{1,4} $!!xmgr
        =~ s!\n!\n\n!gr
        =~ s!\n\n+!\n\n!gr;

    return "$title\n\n$text";
}

binmode STDOUT, ":encoding(utf8)";

say extract_locally($url);

