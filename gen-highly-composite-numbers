#!/usr/bin/env raku

sub prime-factorization(Int $n is copy) {
    state @primes = (2...*).grep(*.is-prime);
    my @factors;

    for @primes -> $p {
        my $k = 1;
        while $n % $p == 0 {
            $n = $n div $p;
            $k++;
        }
        $k -= 1;

        if $k > 0 {
            push @factors, $p => $k;
        }

        if $n == 1 {
            last;
        }

        if $n.is-prime {
            push @factors, $n => 1;
            last;
        };
    }

    return @factors;
}

sub num-of-divisors(Int $n) {
    return [*] prime-factorization($n).map({ .value + 1 });
}

my $current_max = 0;

(2..*).map(
    { $^n => num-of-divisors($^n) }
).grep(
    { (.value > $current_max) and ($current_max = .value)}
).map(*.say);
