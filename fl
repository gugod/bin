#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use File::Next;
use File::Basename 'basename';

my @FILETYPES = qw(perl js json);

sub start {
    my ($self) = @_;

    my $o = {};
    for my $ft (@FILETYPES) {
        if ($self->{opt}{$ft}) {
            my $sub = main->can("looks_like_" . $ft);
            $o->{file_filter} = sub { $sub->($_) };
        }
    }


    my $iter = File::Next::files( $o, $self->{args}[0] // '.' );
    while ( defined ( my $file = $iter->() ) ) {
        print $file, "\n";
    }
}

sub MAIN {
    my (%opt);

    GetOptions(
        \%opt,
        @FILETYPES,
    );

    (bless { opt => \%opt, args => [@ARGV] }, __PACKAGE__)->start();
}
MAIN(@ARGV);

sub looks_like_perl {
    my ($file) = @_;
    return 1 if $file =~ / \.(?: t|p[ml]|pod|comp|psgi ) $/xi;
    return 0 if basename($file) =~ / \. /xi;

    if (open my $fh, '<', $file) {
        read($fh, my $front, 256);
        return 1 if $front && $front =~ m{^#!.*perl};
    }

    return 0;
}

sub looks_like_js {
    my ($file) = @_;
    return 1 if $file =~ / \.(?: js ) $/xi;
    return 0;
}

sub looks_like_json {
    my ($file) = @_;
    return 1 if $file =~ / \.(?: json ) $/xi;
    return 0;
}
