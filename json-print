#!/usr/bin/env perl
use strict;
use warnings;

binmode STDOUT, ":utf8";

package IOReader {
    my $READ_SIZE = 64*2**20; # 64MB

    sub new {
        my ($class, $fh) = @_;
        binmode $fh, ":utf8";
        return bless {
            fh => $fh,
            buf => "",
            buf_cursor => 0,
            saved_cursor => [],
        }, $class;
    }

    my $__flush_mark = int $READ_SIZE * 0.9;
    sub flush {
        my ($self) = @_;
        return unless $self->{buf_cursor} > $__flush_mark;
        substr($self->{buf}, 0, $self->{buf_cursor}) = '';
        $self->{buf_cursor} = 0;
    }

    sub readmore {
        my ($self) = @_;
        return 0 if $self->{eof};
        my $buf2 = '';
        my $nread = read($self->{fh}, $buf2, $READ_SIZE);
        if ($nread) {
            $self->{buf} .= $buf2;
            return $nread;
        }

        $self->{eof} = 1;
        return 0;
    }

    sub lookc {
        my ($self) = @_;
        if ($self->{buf_cursor} >= length($self->{buf})) {
            $self->readmore();
        }
        return substr($self->{buf}, $self->{buf_cursor}, 1);
    }

    sub inc_cursor {
        my ($self) = @_;
        $self->{buf_cursor}++;
    }

    sub getc {
        my ($self) = @_;
        my $c = $self->lookc();
        $self->inc_cursor;
        return $c;
    }
}

package JSONScanner {
    my $digits_onenine = [qw(1 2 3 4 5 6 7 8 9)];
    my $digits_zeronine = ['0', @$digits_onenine];
    my $hex_digits = [@$digits_zeronine, qw(A B C D E F a b c d e f)];

    sub eq_any {
        my ($item, $ref_array) = @_;
        my $i;
        for ($i = 0; $i < @$ref_array; $i++) {
            last if $item eq $ref_array->[$i];
        }
        return $i < @$ref_array;
    }

    sub new {
        my ($class, $fh) = @_;
        return bless {
            io => IOReader->new($fh),
            json_cursor => 0,
            event_handler => undef,
        }, $class;
    }

    sub emit {
        my ($self, $event_name, $tok) = @_;
        my $cb = $self->{event_handler} or return;
        $cb->($event_name, $tok);
    }

    sub scan_ws {
        my ($self) = @_;
        my $tok = '';
        my $io = $self->{io};
        my $c = $io->lookc;
        while (eq_any($c, ["\x{0020}", "\x{000a}", "\x{000d}", "\x{0009}"])) {
            $tok .= $c;
            $io->inc_cursor;
            $c = $io->lookc;
        }
        $self->emit('ws', $tok);
        return $self;
    }

    sub scan_elements {
        my ($self) = @_;
        my $io = $self->{io};
        $self->scan_element;
        my $c = $io->lookc();
        while ($c eq ',') {
            $io->inc_cursor;
            $self->emit(elements_delimiter => $c);
            $self->scan_element;
            $c = $io->lookc();
        }
    }

    sub scan_json {
        my ($self) = @_;
        $self->emit('begin_json');
        $self->scan_element;
        $self->emit('end_json');
    }

    sub scan_element {
        my ($self) = @_;
        $self->emit('begin_element');
        $self->scan_ws;
        $self->scan_value;
        $self->scan_ws;
        $self->emit('end_element');
    }

    sub scan_value {
        my ($self) = @_;
        my $io = $self->{io};

        my $c = $io->lookc;
        $self->emit('begin_value');
        if ($c eq 't') {
            $io->inc_cursor;
            my $expected = 'true';
            my $tok = $c;
            for (1,2,3) {
                $c = $io->getc;
                $c eq substr($expected, $_, 1) or die "Expecting: true";
                $tok .= $c;
            }
            $self->emit(value_true => $tok);
        } elsif ($c eq 'f') {
            $io->inc_cursor;
            my $expected = 'false';
            my $tok = $c;
            for (1,2,3,4) {
                $c = $io->getc;
                $c eq substr($expected, $_, 1) or die "Expecting: false";
                $tok .= $c;
            }
            $self->emit(value_false => $tok);
        } elsif ($c eq 'n') {
            $io->inc_cursor;
            my $expected = 'null';
            my $tok = $c;
            for (1,2,3) {
                $c = $io->getc;
                $c eq substr($expected, $_, 1) or die "Expecting: null";
                $tok .= $c;
            }
            $self->emit(value_null => $tok);
        } elsif ($c eq '[') {
            $self->scan_array;
        } elsif ($c eq '{') {
            $self->scan_object;
        } elsif ($c eq '"') {
            $self->scan_string;
        } else {
            $self->scan_number;
        }
        $self->emit('end_value');
    }

    sub scan_number {
        my ($self) = @_;
        my $io = $self->{io};
        my $tok = '';
        my $c = $io->lookc;
        if ($c eq '-') {
            $io->inc_cursor;
            $tok .= $c;
        }

        $c = $io->lookc;
        if (eq_any($c, $digits_onenine)) {
            $io->inc_cursor;
            $tok .= $c;
            $c = $io->lookc;
            if (eq_any($c, $digits_zeronine)) {
                $tok .= $self->scan_digits;
            }
        } elsif ($c eq '0') {
            $io->inc_cursor;
            $tok .= $c;
        } else {
            die "Expect a digit: $c";
        }

        $c = $io->lookc;
        if ($c eq '.') {
            $io->inc_cursor;
            $tok .= $c;
            $tok .= $self->scan_digits;
            $c = $io->lookc;
        }

        if ($c eq 'e' || $c eq 'E') {
            $io->inc_cursor;
            $tok .= $c;
            $c = $io->getc;
            if ($c eq '+' || $c eq '-') {
                $tok .= $c;
            }
            $tok .= $self->scan_digits;
        }

        $self->emit(number => $tok);
    }

    sub scan_digits {
        my ($self) = @_;
        my $tok = '';
        my $io = $self->{io};
        my $c = $io->getc;
        die "Expecting digits: $c" unless eq_any($c, $digits_zeronine);
        $tok .= $c;
        $c = $io->lookc;
        while(eq_any($c, $digits_zeronine)) {
            $io->inc_cursor;
            $tok .= $c;
            $c = $io->lookc;
        }
        # $self->emit(digits => $tok);
        return $tok;
    }

    sub scan_string {
        my ($self) = @_;
        my $tok = '';
        my $io = $self->{io};
        my $c = $io->getc;
        die q<Expecting: '"'> unless $c eq '"';
        $self->emit('begin_string');
        $tok .= $c;

        $tok .= $self->scan_characters;

        $c = $io->getc;
        die q<Expecting: '"'> unless $c eq '"';
        $tok .= $c;
        $self->emit(string => $tok);

        $self->emit('end_string');
        return $tok;
    }

    sub scan_characters {
        my ($self) = @_;
        my $c = $self->{io}->lookc;
        my $tok = '';
        while ($c ne '"') {
            $tok .= $self->scan_character;
            $c = $self->{io}->lookc;
        }
        return $tok;
    }
    sub scan_character {
        my ($self) = @_;
        my $tok;
        my $io = $self->{io};
        my $c = $io->lookc;
        if (ord($c) >= 0x0020 && ord($c) <= 0x10ffff && $c ne '"' && $c ne '\\') {
            $io->inc_cursor;
            $tok .= $c;
        } elsif ($c eq '\\') {
            $tok .= $self->scan_escape;
        }
        return $tok;
    }

    sub scan_escape {
        my ($self) = @_;
        my $io = $self->{io};
        my $c = $io->getc;
        die q<Expecting: '\\'> unless $c eq "\\";
        my $tok = $c;
        $c = $io->getc;
        if ($c eq 'u') {
            $tok .= $c;
            for (1..4) {
                $c = $io->getc;
                die "Expecting a hex digit" unless eq_any($c, $hex_digits);
                $tok .= $c;
            }
            # $self->emit(escape => $tok);
        } elsif (eq_any($c, ['"', '\\', '/', 'b', 'n', 'r', 't'])) {
            $tok .= $c;
            # $self->emit(escape => $tok);
        } else {
            die "Unexpected character: $c";
        }
        return $tok;
    }

    sub scan_array {
        my ($self) = @_;
        my $io = $self->{io};
        my $c = $io->getc;
        die q<Expecting '['> unless $c eq '[';
        $self->emit('begin_array', $c);

        $self->scan_ws;
        $c = $io->lookc;

        if ($c eq ']') {
            $io->inc_cursor;
            $self->emit('end_array', $c);
        } else {
            $self->scan_elements;
            $c = $io->getc;
            die q<Expecting ']'> unless $c eq ']';
            $self->emit('end_array', $c);
        }
    }

    sub scan_members {
        my ($self) = @_;
        my $io = $self->{io};
        $self->scan_member;

        my $c = $io->lookc;
        while ($c eq ',') {
            $io->inc_cursor;
            $self->emit(members_delimiter => $c);
            $self->scan_member;
            $c = $io->lookc;
        }
    }

    sub scan_member {
        my ($self) = @_;
        my $io = $self->{io};
        $self->emit('begin_member');
        $self->scan_ws;
        $self->scan_string;
        $self->scan_ws;
        my $c = $io->getc();
        die q<Expecting: ':'> unless $c eq ':';
        $self->emit(member_delimiter => $c);
        $self->scan_element;
        $self->emit('end_member');
    }

    sub scan_object {
        my ($self) = @_;
        my $io = $self->{io};
        my $c = $io->getc;
        die q<Expecting '{'> unless $c eq '{';
        $self->emit('begin_object', $c);

        $self->scan_ws;
        $c = $io->lookc;

        if ($c eq '}') {
            $io->inc_cursor;
            $self->emit('end_object', $c);
        } else {
            $self->scan_members;
            $c = $io->getc;
            die q<Expecting '}'> unless $c eq '}';
            $self->emit('end_object', $c);
        }
    }

    sub flush {
        my ($self) = @_;
        $self->{io}->flush;
    }
}

package JSONPrinter {
    sub new {
        my ($class, $fh) = @_;
        my $scanner = JSONScanner->new($fh);
        return bless { scanner => $scanner }, $class;
    }

    sub prettify {
        my ($self) = @_;

        my $pre_ws = '';
        my $post_ws = '';
        my $indent = 0;
        my $tok_print = '';
        my $after_member_delimiter = 0;
        my $previous_event = '';
        my $handlers = +{
            before => {
                end_array   => sub {
                    $indent--;
                    if ($previous_event ne 'begin_array') {
                        print "\n" . '    ' x $indent;
                    }
                },
                end_object  => sub {
                    $indent--;
                    if ($previous_event ne 'begin_object') {
                        print "\n" . '    ' x $indent;
                    }
                },
                begin_array  => sub { },
                begin_object => sub {  },
                end_json => sub { print "\n" },
                members_delimiter => sub { },
                elements_delimiter => sub { },
                begin_member => sub {
                    if ($previous_event eq 'begin_object') {
                        print "\n" . '    'x$indent;
                    }
                },
                begin_element => sub {
                    if ($previous_event eq 'begin_array') {
                        print "\n";
                    }
                    if ($after_member_delimiter) {
                        $after_member_delimiter = 0;
                        print ' ';
                    } else {
                        print '    'x$indent;
                    }
                }
            },
            after => {
                begin_object  => sub {
                    $indent++;
                },
                begin_array  => sub {
                    $indent++;
                },
                elements_delimiter => sub {
                    print "\n";
                },
                member_delimiter => sub {
                    $after_member_delimiter = 1;
                },
                members_delimiter => sub {
                    print "\n" . '    ' x $indent;
                }
            }
        };

        $self->{scanner}->{event_handler} = sub {
            my ($event_name, $tok) = @_;
            return if $event_name eq 'ws';
            $tok_print = $tok;

            my $cb = $handlers->{before}{$event_name};
            $cb->($tok) if $cb;

            if (defined $tok) {
                print $tok_print;
            }

            $cb = $handlers->{after}{$event_name};
            $cb->($tok) if $cb;

            $previous_event = $event_name;

            $self->{scanner}->flush if ($event_name eq "end_object");
        };

        $self->{scanner}->scan_json();
    }
    sub minify {
        my ($self) = @_;
        $self->{scanner}{event_handler} = sub {
            my ($event_name, $tok) = @_;
            return if $event_name eq 'ws' || !defined($tok);
            print $tok;
            $self->{scanner}->flush if ($event_name eq "end_object");
        };
        $self->{scanner}->scan_json;
    }
}

my $json_printer = JSONPrinter->new(\*STDIN);
if (grep { $_ eq '--minify' } @ARGV) {
    $json_printer->minify;
} else {
    $json_printer->prettify;
}

__END__

=head1 Usage

json-print [--minify]

Prettify:

    cat data.json | json-print

Minify (remove whitespaces):

    cat data.json | json-print --minify

=cut
