#!/usr/bin/env raku

my @all-five-letter-words = "/usr/share/dict/words".IO.lines.race.grep(*.chars == 5).map(*.lc).unique.Array;

sub play (Str $answer) {
    my @five-letter-words = @all-five-letter-words;
    my @answer = $answer.lc.comb;

    my sub score (@guess) {
        # 0 - unused
        # 1 - used elsewhere
        # 2 - used here
        my @scores = @guess.kv.map(
            -> $i, $c {
                @answer[$i] eq $c ?? 2 !! $c eq @answer.any ?? 1 !! 0;
            }
        );
        return @scores;
    }

    my sub next-guess ($step, @guess, @score) {
        state @guessed-chars;
        state @board = (0..4).map({ ["a"..."z"] });
        for @score.kv -> $i, $v {
            if $v == 2 {
                @board[$i] = $[ @guess[$i] ];
                @guessed-chars.push(@guess[$i]);
            }
            elsif $v == 1 {
                @board[$i] = @board[$i].grep({ $_ ne @guess[$i] }).Array;
                @guessed-chars.push(@guess[$i]);
            }
            elsif $v == 0 {
                for 0..4 -> $j {
                    @board[$j] = @board[$j].grep({ $_ ne @guess[$i] }).Array;
                }
            }
        }

        my sub good-by-the-board ($word) {
            (0..4).map(-> $i {
                              $word.substr($i, 1) eq @board[$i].any();
                          }).all.so
        }

        @five-letter-words = @five-letter-words.race.grep(&good-by-the-board);

        if @guessed-chars.elems > 0 {
            @five-letter-words = @five-letter-words.race.grep({ .index( @guessed-chars.unique().all() ).defined })
        }

        my @candidates = $step < 3
                          ?? @five-letter-words.race.grep({ .comb.unique.elems == 5 })
                          !! @five-letter-words;
        @candidates = @five-letter-words if @candidates.elems == 0;
        return @candidates.pick().comb();
    }

    my @guess = next-guess(1, $[], $[]);
    my @score = score(@guess);
    my $step = 1;
    while $step < 6 && !(@score.all == 2) {
        say $step, ": ", @guess, " => ", @score;
        @guess = next-guess($step++, @guess, @score);
        @score = score(@guess);
    }
    say $step, ": ", @guess, " => ", @score;

    return @score.all == 2 ?? $step !! 0;
}

sub MAIN (Str $answer, Int :$rounds = 1) {
    unless $answer.chars == 5 && ($answer âˆˆ @all-five-letter-words) {
        say("The answer must be a 5-char word in dictionary.");
        exit(0);
    }

    my %stats = (0..6).map({ $_ => 0 });
    for 1..$rounds -> $i {
        say "# Round $i";
        my $steps = play($answer);
        say $steps == 0 ?? "lost" !! "win", "\n";
        %stats{$steps} += 1;
    }

    say $rounds - %stats{"0"}, " wins, ", %stats{"0"}, " losts";
    say %stats.pairs.sort({ $^a.key <=> $^b.key }).map({ .key ~ ": " ~ .value }).join("\n");
}
