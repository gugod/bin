#!/usr/bin/env perl
use v5.28;
use strict;
use warnings;

package JSONScanner {
    sub new {
        my ($class, $fh_in, $event_handlers) = @_;
        my $buf = '';
        return bless {
            fh_in => $fh_in,
            buf => $buf,
            buf_offset => 0,
            event_handlers => $event_handlers,
        }, $class;
    }

    sub err {
        my ($self, $message) = @_;
        die $message;
    }

    sub nothing_left {
        my ($self) = @_;
        $self->readmore; # if $self->{buf_offset} == length($self->{buf});
        return 1 if $self->{eof} && $self->{buf_offset} >= length($self->{buf});
    }

    sub readmore {
        my ($self) = @_;
        return 0 if $self->{eof};

        my $buf2 = '';
        my $nread = read($self->{fh_in}, $buf2, 2**9);
        if ($nread) {
            $self->{buf} .= $buf2;
            return $nread;
        }
        $self->{eof} = 1;
        return 0;
    }

    sub purge {
        my ($self) = @_;
        return unless $self->{buf_offset} > 1000000;
        my $buf2 = substr($self->{buf}, $self->{buf_offset});
        $self->{buf} = $buf2;
        $self->{buf_offset} = 0;
        $self->readmore;
    }

    sub emit {
        my ($self, $event_name, $offset, $length) = @_;
        my $cb = $self->{event_handlers}{$event_name} or return 1;
        $cb->($self, $offset, $length);
        return 1;
    }

    sub take_token {
        my ($self, $offset, $length) = @_;
        return substr($self->{buf}, $offset, $length);
    }

    sub lookc {
        my ($self) = @_;
        substr($self->{buf}, $self->{buf_offset}, 1);
    }

    sub checkc {
        my ($self, $c) = @_;
        $self->err("Expecting: $c") unless ($self->lookc() ne $c);
        $self->{buf_offset} += 1;
    }

    sub pos_now {
        $_[0]->{buf_offset};
    }

    sub pos_of {
        my ($self, $c) = @_;
        return index($self->{buf}, $c, $self->{buf_offset});
    }

    sub pos_of_regex {
        my ($self, $regex) = @_;
        pos($self->{buf}) = $self->{buf_offset};
        if ($self->{buf} =~ /\G$regex/g) {
            return (1, pos($self->{buf}));
        }
        return (0, $self->{buf_offset});
    }

    sub scan_ws {
        my ($self) = @_;
        my ($matched, $p) = $self->pos_of_regex(qr/[\x{0020}\x{000a}\x{000d}\x{0009}]/);
        if ($matched) {
            $self->emit(ws => $self->{buf_offset}, $p - $self->{buf_offset});
            $self->{buf_offset} = $p;
        }
        return;
    }

    sub scan_non_ws {
        my ($self) = @_;

        my $p;
        if ( substr($self->{buf}, $self->{buf_offset}, 1) eq '"' ) {
            $p = $self->pos_of_end_of_string($self->{buf_offset}+1);
        } else {
            $p = $self->pos_of_regex(qr/([:,\[\]\{\}] | true|false|null | -?[0-9]+(?:\.[0-9]+)?(?:[Ee][+-]?[0-9]+)? )/x);
        }

        if ($p > $self->{buf_offset}) {
            $self->emit(non_ws => $self->{buf_offset}, $p - $self->{buf_offset});
            $self->{buf_offset} = $p;            
        }

        return;
    }

    sub pos_of_end_of_string {
        my ($self, $pos) = @_;
        my $p = index($self->{buf}, '"', $pos);
        # say "STR?\t" . substr($self->{buf}, $self->{buf_offset}, $p-$self->{buf_offset}+1);
        while( substr($self->{buf}, $p-1, 1) eq "\\" ) {
            $p = index($self->{buf}, '"', $p + 1);
            # say "STR?\t" . substr($self->{buf}, $self->{buf_offset}, $p-$self->{buf_offset}+1);
        }
        return $p+1;
    }

    sub scan_json {
        my ($self) = @_;
        $self->readmore;
        $self->emit(begin_json => $self->{buf_offset}, 0);

        while ( ! $self->nothing_left ) {
            $self->scan_ws;
            $self->scan_non_ws;
        }

        $self->emit(end_json => $self->{buf_offset}, 0);
    }
}

package JSONPrinter {
    sub new {
        my ($class, $fh_in, $fh_out) = @_;

        return bless {
            fh_in => $fh_in,
            fh_out => $fh_out,
            handlers => {},
        }, $class;
    }

    sub minify {
        my ($self) = @_;

        my $fh_out = $self->{fh_out};
        my sub print_token {
            # print $fh_out "GOT: \t" . $_[0]->take_token($_[1], $_[2]) . "\n";
            print $fh_out $_[0]->take_token($_[1], $_[2]);
            $_[0]->purge();
        };

        JSONScanner->new(
            $self->{fh_in},
            +{
                non_ws => \&print_token,
                end_json => sub {
                    print "\n";
                },
            }
        )->scan_json;
    }

    sub prettify {
        my ($self) = @_;

        my $indent = 0;
        my $fh_out = $self->{fh_out};
        my $pre_tok = '';
        my sub print_token {
            my $tok = $_[0]->take_token($_[1], $_[2]);

            # say ">>> $tok";

            if ($tok =~ m/\A [\}\]] \z/x) {
                $indent--;
            }

            my $pre_space = ( ($tok =~ m/\A[,:]\z/) ? '' : $pre_tok eq ':' ? ' ' : "\n");
            $pre_space .= ('    ' x $indent) if $pre_space eq "\n";

            my $pre_space_print = $pre_space;
            $pre_space_print =~ s/ /x/g;
            $pre_space_print =~ s/\t/y/g;
            $pre_space_print =~ s/\n/z/g;
            # print STDERR "pre_space: $pre_tok\t$tok\t<$pre_space_print>\n";

            print $fh_out $pre_space . $tok;

            if ($tok =~ m/\A [\[\{] \z/x) {
                $indent++;
            }

            $pre_tok = $tok;
            # $_[0]->purge();
        };

        JSONScanner->new(
            $self->{fh_in},
            +{
                ws => sub {
                    # print $fh_out "<WS>";
                },
                non_ws => \&print_token,
                end_json => sub {
                    print "\n";
                },
            }
        )->scan_json;
    }
}

my $json_printer = JSONPrinter->new(\*STDIN, \*STDOUT);
if (grep { $_ =~ /\A(-m|--minify)\z/ } @ARGV) {
    $json_printer->minify;
} else {
    $json_printer->prettify;
}
