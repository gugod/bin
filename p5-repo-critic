#!/usr/bin/env perl
use v5.18;
use strict;
use warnings;

package App::p5repocritic::Evidence {
    use Moose;
    use Types::Standard qw( Str Int );

    has name => ( required => 1, is => "ro", isa => Str );
    has src_file => ( required => 1, is => "ro", isa => Str );
    has element_type => ( required => 1, is => "ro", isa => Str );
    has line_number =>  ( required => 1, is => "ro", isa => Int );

    use overload '""' => sub { $_[0]->name };
};

package App::p5repocritic::Code {
    use Moose;
    use Types::Standard qw(Str);
    use PPI;
    has src_file => ( required => 1, is => "ro", isa => Str );
    has ppi_doc => (
        required => 1,
        lazy_build => 1,
        is => "ro",
        isa => "PPI::Document",
    );

    sub _build_ppi_doc {
        my ($self) = @_;
        my $doc = PPI::Document->new( $self->src_file );
        $doc->index_locations;
        return $doc;
    }

    sub subrotine_definition {
        my ($self) = @_;
        my $found = $self->ppi_doc->find( sub { $_[1]->isa("PPI::Statement::Sub") and $_[1]->name }) or return ();
        my @o;
        for my $tok (@$found) {
            my $o = App::p5repocritic::Evidence->new(
                src_file => $self->src_file,
                element_type => "PPI::Statement::Sub",
                line_number => $tok->line_number,
                name => $tok->name,
            );
            push @o, $o;
        }
        return @o;
    }

    sub subrotine_invocation {
        my ($self) = @_;
        return ();
    }
};

package App::p5repocritic::Repo {
    use Moose;
    has codes => (
        is => "ro",
        required => 1,
        # isa => "ArrayRef[App::p5repocritic::Code]",
        default => sub { [] },
    );

    sub put {
        my ($self, $o) = @_;
        die "Can't feed me that." unless $o->isa('App::p5repocritic::Code');
        push @{ $self->codes }, $o;
    }

    sub iter {
        my ($self) = @_;
        my $i = 0;
        return sub {
            if ($i < @{ $self->codes }) {
                return $self->codes->[$i++];
            }
            return undef;
        }
    }
};

package App::p5repocritic::Critic {
    use Moose;
    has repo => (
        is => "ro",
        required => 1,
        isa => "App::p5repocritic::Repo",
    );

    sub run {
        my ($self) = @_;
        $self->locate_subroutine_without_invocation;
    }

    sub locate_subroutine_without_invocation {
        my ($self) = @_;

        my (@invocations, @definitions);
        my $it = $self->repo->iter;
        while (my $code = $it->()) {
            push @definitions, $code->subrotine_definition;
            push @invocations, $code->subrotine_invocation;
        }

        my %invoked;
        for (@invocations) {
            $invoked{$_}++;
        }
        for my $x (@definitions) {
            if ( $invoked{$x} ) {
                say "Unused subroutine: $x";
            }
        }
    }
};

package App::p5repocritic {
    use strict;
    use warnings;
    use File::Next;

    sub new {
        my ($class, $args) = @_;
        return bless { src_paths => $args }, __PACKAGE__;
    }

    sub looks_like_a_perl_src_file {
        my ($file) = @_;

        return 1 if $file =~ / \.(?: t|p[ml]|pod|comp ) $/xi;
        return 0 if $file =~ / \. /xi;

        if (open my $fh, '<', $file) {
            my $line = <$fh>;
            return 1 if defined($line) && $line =~ m{^#!.*perl};
        }
        return 0;
    }

    sub run {
        my ($self) = @_;
        my $src_paths = $self->{src_paths};
        my $report_success = 0;
        @$src_paths = ('.') unless $src_paths;
        $report_success = 1 if @$src_paths > 1;

        my $repo = App::p5repocritic::Repo->new( src_paths => $src_paths );
        my $iter = File::Next::files( @{$self->{src_paths}} );
        while(defined( my $file = $iter->() )) {
            next unless looks_like_a_perl_src_file($file);
            my $o = App::p5repocritic::Code->new( src_file => $file );
            $repo->put( $o );
        }
        App::p5repocritic::Critic->new( repo => $repo )->run;
    }
};

my @paths = @ARGV;
App::p5repocritic->new(\@paths)->run;
