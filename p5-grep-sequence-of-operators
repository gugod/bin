#!/usr/bin/env perl

use v5.18;
use strict;
use warnings;

use File::Spec;
use File::Next;
use PPI::Document;
use Scalar::Util qw(refaddr);

use constant OP_PRIORITY => do {
    # perldoc perlop

    my %priority;
    my $p = 9;

    $priority{$_} = $p for ('!', '~', "\\");
    $p--;

    $priority{$_} = $p for ('<', '>', '<=', '>=', 'lt', 'gt', 'le', 'ge');
    $p--;

    $priority{$_} = $p for ('==', '!=', '<=>', 'eq', 'ne', 'cmp', '~~');
    $p--;

    $priority{$_} = $p for ('&&');
    $p--;

    $priority{$_} = $p for ('//', '||');
    $p--;

    \%priority
};

sub sayit {
    my ($file, $found) = @_;

    # strings, the best data structure for humanity.
    my @found_op = map { "". $_->content } @$found;

    # Special deal for '//' and '||'
    if ($found_op[0] eq '//' || $found_op[0] eq '||') {
        if (OP_PRIORITY->{ $found_op[1] } > OP_PRIORITY->{ $found_op[0] }) {
            say "# WARN: Bad smells of operations, add parenthesis to disambiguate.";
        }
    }

    say "# " . $file . ":" . $found->[0]->line_number;
    say $found->[0]->parent->content;
    say "Operators: " . join " ... ", map { $_ . '('. OP_PRIORITY->{$_} . ')' } @found_op;
    say "";
}

sub search_and_say {
    my ($file) = @_;

    my $doc = PPI::Document->new($file, readonly => 1);
    $doc->index_locations;

    my $tokens = $doc->find(
        sub {
            my ($el) = $_[1];
            return 0 unless $el->significant && $el->isa("PPI::Token::Operator");
            my $op = $el->content();
            return !!(OP_PRIORITY->{$op});
        }
    ) or return;

    my @found = (shift @$tokens);
    for (@$tokens) {
        if ( refaddr($found[0]->parent) == refaddr($_->parent) ) {
            push @found, $_;
        } else {
            sayit($file, \@found) if @found > 1;
            @found = ($_);
        }
    }
    sayit($file, \@found) if @found > 1;
}

my $files = File::Next::files({
    file_filter => sub {
        return 1 if /\.p[ml]\z/i;
        return 0 if !/\A\./i && /\./i;

        my $file = $_;
        if (open my $fh, '<', $file) {
            my $line = <$fh>;
            return 1 if $line && $line =~ m{^#!.*perl};
        }
        return 0;
    }
}, $ARGV[0] // '.');

while (defined( my $file = $files->())) {
    search_and_say($file);
}
