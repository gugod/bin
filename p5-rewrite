#!/usr/bin/env perl
use v5.18;
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/lib";
use Fun 'foreach_perl_source_file';
use Fun::P5 qw(inject_include);

use PPI;
use PPI::Document;
use PPI::Element;
use PPI::Structure::List;

use Scalar::Util qw(refaddr);

my %REPLACE = (
    'ARRAY' => 'is_plain_arrayref',
    'HASH'  => 'is_plain_hashref',
);

sub rewrite_ref_eq_without_parens_case_2 {
    my ($doc) = @_;
    my %info;
    my $tokens = $doc->find(
        sub {
            # Finds:
            #    ref ... eq '...'

            my $el = $_[1];
            return 0 unless $el->isa('PPI::Token::Operator') && "$el" eq "eq";
            my $el_next = $el->snext_sibling;
            return 0 if $el->sprevious_sibling->isa('PPI::Structure::List');

            return 0 unless $el_next->isa('PPI::Token::Quote');
            my $WHAT = $el_next->string;
            return 0 unless $REPLACE{$WHAT};

            my $el_ref = $el->sprevious_sibling;
            while ($el_ref && ! ($el_ref->isa('PPI::Token::Word') && "$el_ref" eq "ref") ) {
                $el_ref = $el_ref->sprevious_sibling;
            }
            return 0 unless $el_ref;

            my $addr = refaddr($el);
            $info{$addr} = [
                $el_ref,
                $WHAT,
            ];
            return 1;
        }
    ) or return;

    for my $el_eq (@$tokens) {
        my $addr = refaddr($el_eq);
        my ($el_ref, $what) = @{$info{$addr}};

        my @betweeners;
        my $el = $el_ref->next_sibling;
        while (refaddr($el) != $addr) {
            push @betweeners, $el;
            $el = $el->next_sibling;
        }
        my $arglist = join("", @betweeners) =~ s/\s+//r  =~ s/\s+\z//r;
        my $el_list = PPI::Document->new(\('(' . $arglist . ') '));

        $el_eq->parent->__insert_before_child($el_eq, $el_list);
        $_->delete for @betweeners;
    }
}

sub rewrite_ref_eq_without_parens_case_1 {
    my ($doc) = @_;
    my %info;
    my $tokens = $doc->find(
        sub {
            # Finds:
            #    ref $ok eq '...'

            my $el = $_[1];
            return 0 unless $el->isa('PPI::Token::Operator') && "$el" eq "eq";
            return 0 if $el->sprevious_sibling->isa('PPI::Structure::List');

            my $el_next = $el->snext_sibling;
            return 0 unless $el_next->isa('PPI::Token::Quote');
            my $WHAT = $el_next->string;
            return 0 unless $REPLACE{$WHAT};

            # The rest of this subroutine finds "ref" and store it $el_ref.
            # The the document ranged $el_ref ... $el is the range we wish to rewrite.

            my $el_ref;
            my $el_prev = $el->sprevious_sibling;
            return 0 unless $el_prev->isa('PPI::Token::Symbol');

            $el_prev = $el_prev->sprevious_sibling;
            return 0 unless $el_prev->isa('PPI::Token::Word') && "$el_prev" eq "ref";

            my $addr = refaddr($el);
            $info{$addr} = [
                $el_prev,
                $WHAT,
            ];
            return 1;
        }
    ) or return;


    for my $el_eq (@$tokens) {
        my $addr = refaddr($el_eq);
        my ($el_ref, $what) = @{$info{$addr}};


        my @betweeners;
        my $el = $el_ref->next_sibling;
        while (refaddr($el) != $addr) {
            push @betweeners, $el;
            $el = $el->next_sibling;
        }
        my $arglist = join("", @betweeners) =~ s/\s+//r  =~ s/\s+\z//r;
        my $el_list = PPI::Document->new(\('(' . $arglist . ') '));

        $el_eq->parent->__insert_before_child($el_eq, $el_list);
        $_->delete for @betweeners;
    }
}

sub rewrite_ref_eq {
    my ($doc) = @_;
    my %replaced = ();

    my %partner;
    my $tokens = $doc->find(
        sub {
            # This subroutine gather then element for an `eq` operator, if it is followed by
            # "ARRAY"/"HASH", and preceeed by a "ref" keyword that looks like a ref() call.

            my $el = $_[1];
            return 0 unless $el->isa('PPI::Token::Operator') && "$el" eq "eq";
            my $el_next = $el->snext_sibling;
            return 0 unless $el_next->isa('PPI::Token::Quote');
            my $WHAT = $el_next->string;
            return 0 unless $REPLACE{$WHAT};

            # The rest of this subroutine finds "ref" and store it $el_ref.
            # The the document ranged $el_ref ... $el is the range we wish to rewrite.

            my $el_ref;
            my $el_prev = $el->sprevious_sibling;
            if ($el_prev->isa('PPI::Structure::List')) {
                # This part discover all cases when ref() comes with parens
                #    - ref(...) eq "ARRAY"
                #    - ref(...) eq "HASH"

                $el_prev = $el_prev->sprevious_sibling;
                if ($el_prev->isa('PPI::Token::Word') && "$el_prev" eq "ref" && !$el_prev->method_call) {
                    $el_ref = $el_prev;
                }
            } elsif ($el_prev->isa('PPI::Token::Symbol')) {
                # This part covers a trivial case:
                #     ref $z eq 'ARRAY'
                $el_prev = $el_prev->sprevious_sibling;
                if ($el_prev->isa('PPI::Token::Word') && "$el_prev" eq "ref" && !$el_prev->method_call) {
                    $el_ref = $el_prev;
                }
            }

            return 0 unless $el_ref;

            my $addr = refaddr($el);
            $partner{$addr} = [
                $el_ref,
                $WHAT,
            ];
            return 1;
        }
    ) or return;

    for my $el_eq (@$tokens) {
        my $el_eq_addr = refaddr($el_eq);
        my $el_ref = $partner{$el_eq_addr}[0];
        my $WHAT   = $partner{$el_eq_addr}[1];
        my $el_WHAT = $el_eq->snext_sibling;

        $el_ref->set_content( $REPLACE{$WHAT} );
        $replaced{$REPLACE{$WHAT}}++;

        my @to_remove = ($el_eq, $el_WHAT);
        unless ($el_eq->previous_sibling->significant) {
            push @to_remove, $el_eq->previous_sibling;
        }

        my $el_next = $el_eq->next_sibling;
        my $el_WHAT_addr = refaddr($el_WHAT);
        my $addr = refaddr($el_next);
        while ($addr != $el_WHAT_addr) {
            push @to_remove, $el_next;
            $el_next = $el_next->next_sibling;
            $addr = refaddr($el_next);
        }
        for (@to_remove) {
            $_->delete;
        }
    }

    inject_include(
        $doc,
        'Ref::Util',
        sort keys %replaced,
    );
}

my @args = @ARGV;
@args = (".") if !@args;
foreach_perl_source_file \@args => sub {
    my ($file) = @_;
    say "... $file";

    my $doc = PPI::Document->new($file) or return;
    rewrite_ref_eq_without_parens_case_1($doc);
    $doc->save($file);

    $doc = PPI::Document->new($file) or return;
    rewrite_ref_eq_without_parens_case_2($doc);
    $doc->save($file);

    $doc = PPI::Document->new($file) or return;
    rewrite_ref_eq($doc);
    $doc->save($file);
};
