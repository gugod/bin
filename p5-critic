#!/usr/bin/env perl

# cpanm: Mo PPI PPR File::Next File::Slurp Encode

use v5.18;
use strict;
use warnings;

package App::p5critic::Report {
    use Mo qw'default is required';
    has errors  => ( isa => "ArrayRef", lazy => 1, default => sub { [] });
    has notices => ( isa => "ArrayRef", lazy => 1, default => sub { [] });

    sub has_errors {
        my ($self) = @_;
        return (@{ $self->errors } > 0);
    }

    sub has_notices {
        my ($self) = @_;
        return (@{ $self->notices } > 0);
    }

    sub error {
        my ($self, $o) = @_;
        push @{$self->errors}, $o;
    }

    sub notice {
        my ($self, $o) = @_;
        push @{$self->notices}, $o;
    }

    sub print_errors {
        my ($self) = @_;
        # U+2620:  SKULL AND CROSSBONES
        say for map { $_ = "\x{2620}: $_"; utf8::encode($_); $_; } @{ $self->errors };
    }

    sub print_notices {
        my ($self) = @_;
        # U+2139: INFORMATION SOURCE
        say for map { $_ = "\x{2139}: $_"; utf8::encode($_); $_; } @{ $self->notices };
    }
}

package App::p5critic::PerlCodeCritic {
    use Mo qw'default is required';
    use PPR;
    use PPI;
    use File::Slurp qw(read_file);

    has src_file => ( required => 1, isa => "File", is => "ro", );
    has src_code => ( is => "rw", lazy => 1, default => sub { scalar read_file( $_[0]->src_file ) } );

    has reporter => (
        is => "ro",
        lazy => 1,
        default => sub { App::p5critic::Report->new() },
    );

    sub check {
        my ($self) = @_;

        for my $checker (
            "must_be_parsable",
            "should_have_no_imported_but_unused_subroutine",
            "should_use_all_defined_constants",
            "should_not_use_utf8_unnecessarily",
        ) {
            $self->$checker;
            last if $self->reporter->has_errors;
        }
        return $self->reporter;
    }

    sub must_be_parsable {
        my $self = shift;

        my $ppi_doc = PPI::Document->new(\($self->src_code));
        if ($ppi_doc) {
            $ppi_doc->index_locations;
            $self->{ppi_src_code} = $ppi_doc;
        } else {
            $self->reporter->error("The code is not PPI-parsable: " . PPI::Document->errstr);
        }

        unless (eval { $self->src_code =~ m{\A (?&PerlDocument) \Z $PPR::GRAMMAR }x }) {
            if (!$ppi_doc) {
                $self->reporter->error("This code is neither PPR-parable nor PPI-parsable. It is probably wrong.");
            } else {
                $self->reporter->notice("This code is not PPR-parable, but PPI-parsable. That's rare...");
            }
        }
    }

    sub should_have_no_imported_but_unused_subroutine {
        my $self = shift;
        # Explicity imported, but unused subroutine.

        my %imported;
        my %is_special = map { $_ => 1 } qw(use parent base constant);

        my $ppi_doc = $self->{ppi_src_code};

        my $include_statements = $ppi_doc->find(sub { $_[1]->isa('PPI::Statement::Include') }) || [];
        for my $st (@$include_statements) {
            next if $st->schild(0) eq "no";
            my $expr_qw = $st->find( sub { $_[1]->isa('PPI::Token::QuoteLike::Words'); }) or next;

            my $included_module = $st->schild(1);
            next if $is_special{"$included_module"};

            if (@$expr_qw == 1) {
                my $expr = $expr_qw->[0];

                my $expr_str = "$expr";

                # Given that both PPI and PPR parse this correctly, I don't care about what are the characters used for quoting. We can remove the characters at the position that are supposed to be quoting characters.
                substr($expr_str, 0, 3) = "";
                substr($expr_str, -1, 1) = "";

                my @words = split ' ', $expr_str;
                for my $w (@words) {
                    next if $w =~ /\A [:\-]/x;
                    push @{ $imported{$w} //=[] }, $included_module->line_number;
                }
            } else {
                $self->reporter->error("Failed to grok this: $st");
            }
        }

        my %used;
        for my $el_word (@{ $ppi_doc->find( sub { $_[1]->isa("PPI::Token::Word") }) ||[]}) {
            $used{"$el_word"}++;
        }

        my @to_report = grep { !$used{$_} } (sort keys %imported);

        for my $tok (@to_report) {
            $self->reporter->notice("unused imports: <$tok>, at line: " . join(",", @{$imported{$tok}}));
        }
    }

    sub should_use_all_defined_constants {
        my $self = shift;
        my $ppi_doc = $self->{ppi_src_code};

        my %defined_constants;
        my %used;

        my $include_statements = $ppi_doc->find(sub { $_[1]->isa('PPI::Statement::Include') }) || [];
        for my $st (@$include_statements) {
            next unless $st->schild(0) eq "use" && $st->schild(1) eq "constant";
            if ($st->schild(2)->isa("PPI::Token::Word")) {
                my $constant_name = $st->schild(2);
                push @{ $defined_constants{"$constant_name"} }, $constant_name->line_number;
            }
            elsif ($st->schild(2)->isa("PPI::Structure::Constructor")) {
                my $odd = 0;
                my @elems = @{ $st->schild(2)->find(sub { $_[1]->isa("PPI::Token") && $_[1]->significant && (! $_[1]->isa("PPI::Token::Operator")) && ($odd = 1 - $odd) }) };
                for my $el (@elems) {
                    push @{ $defined_constants{"$el"} }, $el->line_number;
                }
            }
        }


        for my $el_word (@{ $ppi_doc->find( sub { $_[1]->isa("PPI::Token::Word") }) ||[]}) {
            my $st = $el_word;
            while ($st) {
                last if ($st->isa("PPI::Statement::Include"));
                $st = $st->parent;
            }
            next if $st;
            $used{"$el_word"}++;
        }

        my @to_report = grep { !$used{$_} } (sort keys %defined_constants);
        for my $tok (@to_report) {
            $self->reporter->notice("unused constant: <$tok>, at line: " . join(",", @{$defined_constants{$tok}}));
        }
    }

    sub should_not_use_utf8_unnecessarily {
        my $self = shift;
        my $ppi_doc = $self->{ppi_src_code};
        my $use_utf8_statements = $ppi_doc->find(
            sub {
                my $st = $_[1];
                $st->isa('PPI::Statement::Include') && $st->schild(0) eq "use" && $st->schild(1) eq "utf8";
            }
        );
        return unless $use_utf8_statements;

        my $chars_outside_ascii_range = 0;
        for (my $tok = $ppi_doc->first_token; $tok; $tok = $tok->next_token) {
            next unless $tok->significant;
            my $src = $tok->content;
            utf8::decode($src);

            my @c = split "", $src;
            for (my $i = 0; $i < @c; $i++) {
                if (ord($c[$i]) > 127) {
                    $chars_outside_ascii_range++;
                }
            }
            last if $chars_outside_ascii_range;
        }

        unless ($chars_outside_ascii_range) {
            $self->reporter->notice("'use utf8;' seems to be unnecessary. All characters in the source code are within ASCII range.");
        }
    }
};

package App::p5critic {
    use Encode qw'encode_utf8';
    use File::Slurp qw(read_file);
    use File::Next;

    sub looks_like_a_perl_src_file {
        my ($file) = @_;

        return 1 if $file =~ / \.(?: t|p[ml]|pod|comp ) $/xi;
        return 0 if $file =~ / \. /xi;

        if (open my $fh, '<', $file) {
            my $line = <$fh>;
            return 1 if defined($line) && $line =~ m{^#!.*perl};
        }
        return 0;
    }

    sub new {
        my ($class, $args) = @_;
        return bless { src_paths => $args }, __PACKAGE__;
    }

    sub run {
        my ($self) = @_;
        my $src_paths = $self->{src_paths};
        my $report_success = 0;
        @$src_paths = ('.') unless @$src_paths;
        $report_success = 1 if @$src_paths > 1;

        my $iter = File::Next::files( @{$self->{src_paths}} );
        while(defined( my $file = $iter->() )) {
            next unless looks_like_a_perl_src_file($file);
            my $o = App::p5critic::PerlCodeCritic->new(
                src_file => $file,
            );
            my $report = $o->check();

            if ($report->has_errors || $report->has_notices) {
                # U+1F611 EXPRESSIONLESS FACE
                say encode_utf8("\n\x{1F611}  $file");
                if ($report->has_errors) {
                    $report->print_errors;
                } elsif ($report->has_notices) {
                    $report->print_notices;
                }
                print "\n";
            } elsif ($report_success) {
                # U+1F44D THUMBS UP SIGN
                say encode_utf8("\n\x{1F44D}  $file");
            }
        }
    }
};

my @paths = @ARGV;
App::p5critic->new(\@paths)->run;
