#!/usr/bin/env raku

my @all-five-letter-words = "/usr/share/dict/words".IO.lines.race.grep(*.chars == 5).map(*.lc).unique.Array;

sub play (Str $answer, Str @initial-guesses is copy) {
    my @five-letter-words = @all-five-letter-words;
    my @answer = $answer.lc.comb;

    my sub score (@guess) {
        # 0 - unused
        # 1 - used elsewhere
        # 2 - used here
        my @scores = @guess.kv.map(
            -> $i, $c {
                @answer[$i] eq $c ?? 2 !! $c eq @answer.any ?? 1 !! 0;
            }
        );
        return @scores;
    }

    my sub next-guess ($step, @guess, @score) {
        state @guessed;
        state @guessed-chars;
        state @board = (0..4).map({ ["a"..."z"] });
        for @score.kv -> $i, $v {
            if $v == 2 {
                @board[$i] = $[ @guess[$i] ];
                @guessed-chars.push(@guess[$i]);
            }
            elsif $v == 1 {
                @board[$i] = @board[$i].grep({ $_ ne @guess[$i] }).Array;
                @guessed-chars.push(@guess[$i]);
            }
            elsif $v == 0 {
                for 0..4 -> $j {
                    @board[$j] = @board[$j].grep({ $_ ne @guess[$i] }).Array;
                }
            }
        }

        my sub good-by-the-board ($word) {
            (0..4).map(-> $i {
                              $word.substr($i, 1) eq @board[$i].any();
                          }).all.so
        }

        @five-letter-words = @five-letter-words.race.grep(&good-by-the-board);

        if @guessed-chars.elems > 0 {
            @five-letter-words = @five-letter-words.race.grep({ .index( @guessed-chars.unique().all() ).defined })
        }

        if @initial-guesses.elems > 0 {
            my $guess = @initial-guesses.shift;
            @guessed.push($guess);
            return $guess.comb();
        }

        my @candidates = $step < 3
                          ?? @five-letter-words.race.grep({ .comb.unique.elems == 5 })
                          !! @five-letter-words;
        @candidates = @five-letter-words if @candidates.elems == 0;

        my $guess = @candidates.grep(* ne @guessed.any).pick();
        @guessed.push($guess);
        return $guess.comb();
    }

    my @guesses;
    my @guess = next-guess(1, $[], $[]);
    @guesses.push( @guess.join );
    my @score = score(@guess);
    my $won = (@score.all == 2);
    my $step = 1;

    while $step < 6 && !$won {
        @guess = next-guess($step++, @guess, @score);
        @guesses.push( @guess.join );
        @score = score(@guess);
        $won = (@score.all == 2);
    }

    my $win-steps = $won ?? $step !! 0;
    return ($win-steps, @guesses);
}

sub play-many-rounds (Str $answer, Int $rounds, Str @initial-guesses, Bool :$quiet) {
    my %stats = (0..6).map({ $_ => 0 });
    my @results;
    for 1..$rounds -> $i {
        my ($steps, @guesses) = play($answer, @initial-guesses);
        %stats{$steps} += 1;
        @results.push([ $i,($steps != 0 ?? "WIN" !! "LOST"), $steps, @guesses ]);
    }

    unless $quiet {
        for @results -> @res {
            my ($round, $win-or-lost, $steps, @guesses) = @res;
            say join("\t", $answer, $round, $win-or-lost, $steps, @guesses.join(" "));
        }

        if $rounds > 1 {
            say join("\t", $answer, "WINS", $rounds - %stats{"0"});
            say join("\t", $answer, "LOSTS", %stats{"0"});
            say join("\t", $answer, "STATS", (1..6).map({ %stats{$^n} }).join(","));
        }
    }

    return $rounds - %stats{"0"};
}

sub MAIN (Str :$answer, Int :$rounds = 1, Bool :$random-answer = False, Str :$initial-guesses = "") {
    my Str @initial-guesses = $initial-guesses.split(",");

    if $answer.defined {
        unless $answer.chars == 5 && ($answer âˆˆ @all-five-letter-words) {
            say("The answer must be a 5-char word in the dictionary.");
            exit(0);
        }
        play-many-rounds($answer, $rounds, @initial-guesses);
    }
    elsif $random-answer {
        play-many-rounds(@all-five-letter-words.pick(), $rounds, @initial-guesses);
    }
}
